---
import "../../styles/pages/home/nav.css";

const {isFixed} = Astro.props;
---

<nav class="navbar" aria-label="التنقل الرئيسي" style={isFixed ? "position: fixed;" : "position: static;"}>
    <div class="navbar-content">
        <div class="navbar-inner">
            <div class="navbar-brand">
                <a href="/" aria-label="الصفحة الرئيسية">
                    عبدالرحمن شاهين
                </a>
            </div>

            <!-- Mobile menu button -->
            <button
                    class="mobile-menu-button"
                    aria-label="فتح القائمة"
                    aria-expanded="false"
                    type="button"
            >
                <span class="hamburger-line"></span>
                <span class="hamburger-line"></span>
                <span class="hamburger-line"></span>
            </button>

            <!-- Desktop navigation -->
            <div class="navbar-links desktop-nav">
                <a href="/#about" class="navbar-link">
                    <span class="link-text">نبذة</span>
                </a>
                <a href="/#work" class="navbar-link">
                    <span class="link-text">أعمال</span>
                </a>
                <a href="/articles" class="navbar-link">
                    <span class="link-text">مقالات</span>
                </a>
                <a href="/#contact" class="navbar-link">
                    <span class="link-text">تواصل</span>
                </a>
            </div>

            <!-- Mobile navigation -->
            <div class="mobile-nav" id="mobile-menu">
                <div class="mobile-nav-content">
                    <a href="/#about" class="mobile-link">نبذة</a>
                    <a href="/#work" class="mobile-link">أعمال</a>
                    <a href="/articles" class="mobile-link">مقالات</a>
                    <a href="/#contact" class="mobile-link">تواصل</a>
                </div>
            </div>
        </div>
    </div>
</nav>

<script>
    // Use an IIFE to avoid polluting global scope and enable better minification
    (() => {
        // Cache DOM elements early
        const mobileMenuButton = document.querySelector('.mobile-menu-button') as HTMLButtonElement;
        const mobileNav = document.querySelector('.mobile-nav') as HTMLElement;
        const body = document.body;
        const nav = document.querySelector('.navbar') as HTMLElement;

        // Early return if critical elements don't exist
        if (!mobileMenuButton || !mobileNav || !nav) return;

        // Cache computed values
        const navHeight = nav.offsetHeight;
        let ticking = false;

        // --- Mobile Menu Toggle (optimized) ---
        const closeMobileMenu = () => {
            mobileNav.classList.remove('active');
            mobileMenuButton.classList.remove('active');
            mobileMenuButton.setAttribute('aria-expanded', 'false');
            mobileMenuButton.setAttribute('aria-label', 'فتح القائمة');
            body.classList.remove('mobile-menu-open');
        };

        const toggleMobileMenu = () => {
            const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
            const newState = !isExpanded;

            mobileMenuButton.setAttribute('aria-expanded', String(newState));
            mobileMenuButton.setAttribute('aria-label', newState ? 'إغلاق القائمة' : 'فتح القائمة');
            mobileNav.classList.toggle('active', newState);
            mobileMenuButton.classList.toggle('active', newState);
            body.classList.toggle('mobile-menu-open', newState);
        };

        // Use event delegation for mobile links instead of individual listeners
        mobileNav.addEventListener('click', (e) => {
            if ((e.target as Element).classList.contains('mobile-link')) {
                closeMobileMenu();
            }
        });

        // Optimized outside click handler
        const handleOutsideClick = (e: Event) => {
            const target = e.target as Node;
            if (!mobileMenuButton.contains(target) && !mobileNav.contains(target)) {
                closeMobileMenu();
            }
        };

        mobileMenuButton.addEventListener('click', toggleMobileMenu);
        document.addEventListener('click', handleOutsideClick);

        // --- Optimized Active Link Highlighting ---
        const sections = Array.from(document.querySelectorAll('section[id]')) as HTMLElement[];
        const navLinks = Array.from(document.querySelectorAll('.navbar-link, .mobile-link')) as HTMLAnchorElement[];

        // Cache section data for better performance
        const sectionData = sections.map(section => ({
            id: section.id,
            offsetTop: section.offsetTop
        }));

        // Throttled scroll handler using requestAnimationFrame
        const updateActiveLinkOnScroll = () => {
            if (!ticking) {
                requestAnimationFrame(() => {
                    const scrollY = window.scrollY;
                    let currentSectionId = '';

                    // Use cached section data
                    for (const section of sectionData) {
                        if (scrollY >= section.offsetTop - navHeight - 1) {
                            currentSectionId = section.id;
                        }
                    }

                    // Batch DOM updates
                    navLinks.forEach(link => {
                        const isActive = link.getAttribute('href') === `/#${currentSectionId}`;
                        link.classList.toggle('active', isActive);
                    });

                    ticking = false;
                });
                ticking = true;
            }
        };

        // --- Optimized Smooth Scroll ---
        const handleSmoothScroll = (e: Event) => {
            const target = e.target as HTMLAnchorElement;
            const href = target.getAttribute('href');

            if (!href?.startsWith('/#')) return;

            e.preventDefault();

            const targetId = href.substring(2);
            const targetElement = document.getElementById(targetId);

            if (targetElement) {
                const offsetPosition = targetElement.offsetTop - navHeight;

                window.scrollTo({
                    top: offsetPosition,
                    behavior: 'smooth'
                });

                // Use replaceState instead of pushState to avoid cluttering history
                history.replaceState(null, '', href);
            }
        };

        // Use event delegation for anchor links
        document.addEventListener('click', (e) => {
            const target = e.target as Element;
            if (target.tagName === 'A' && (target as HTMLAnchorElement).getAttribute('href')?.startsWith('/#')) {
                handleSmoothScroll(e);
            }
        });

        // Use passive listener for better scroll performance
        window.addEventListener('scroll', updateActiveLinkOnScroll, { passive: true });

        // Initial call
        updateActiveLinkOnScroll();
    })();
</script>